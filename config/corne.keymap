/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define COLEMAK 0
#define QWERTY  1
#define SYM     2
#define NUM     3
#define FUN     4
#define MUS     5
#define NAV     6
#define MED     7


/ {
        keymap {
                compatible = "zmk,keymap";

                COLEMAK {
// -----------------------------------------------------------------------------------------
// |      |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  '  |      |
// |      |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  O  |  U  |      |
// |      |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |      |
//                    | ESC | SPC | TAB |   | BCK | RET  | DEL |
                        bindings = <
   &none     &hto QWERTY Q &kp W             &kp F       &kp P         &kp B           &kp J        &kp L       &kp U       &kp Y            &kp SQT       &none
   &none     &mt LALT A    &mt LCTRL R       &mt LGUI S  &mt LSHFT T   &kp G           &kp M        &mt LSHFT N &mt LGUI E  &mt LCTRL I      &mt LALT O    &none
   &none     &kp         Z &kp X             &kp C       &kp D         &kp V           &kp K        &kp H       &kp COMMA   &kp DOT          &kp FSLH      &none
                                             &lt MED ESC &lt NAV SPACE &lt MUS TAB     &lt SYM BKSP &lt NUM RET &lt FUN DEL
                        >;
                };
                QWERTY {
// -----------------------------------------------------------------------------------------
// |      |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |      |
// |      |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  '  |      |
// |      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
//                    | ESC | SPC | TAB |   | BCK | RET  | DEL |
                        bindings = <
   &none     &hto COLEMAK Q &kp W       &kp E       &kp R         &kp T         &kp Y        &kp U       &kp I          &kp O         &kp P         &none
   &none     &mt LALT A     &mt LCTRL S &mt LGUI D  &mt LSHFT F   &kp G         &kp H        &mt LSHFT J &mt LGUI K     &mt LCTRL L   &mt LALT SQT  &none
   &none     &kp Z          &kp X       &kp C       &kp V         &kp B         &kp N        &kp M       &kp COMMA      &kp DOT       &kp FSLH      &none
                                        &lt MED ESC &lt NAV SPACE &lt MUS TAB   &lt SYM BKSP &lt NUM RET &lt FUN DEL
                        >;
                };
                SYM {
// -----------------------------------------------------------------------------------------
// |     |  `  |  %  |  (  |  )  |  ^  | |     | |      |      |      |     |      |      |
// |     |  ;  |  @  |  $  |  !  |  #  | |     | |      | SHFT | META | CTR | ALT  |      |
// |     |  :  |  _  |  *  |  &  |  |  | |     | |      |      |      |     |      |      |
//                   | ESC | SPC | TAB | |     | |      |      |      |
                        bindings = <
   &none   &kp GRAVE  &kp PRCNT    &kp LPAR        &kp RPAR       &kp CARET       &none &none     &none    &none     &none    &none
   &none   &kp SEMI   &kp AT       &kp DLLR        &kp EXCL       &kp HASH        &none &kp LSHFT &kp LGUI &kp LCTRL &kp LALT &none
   &none   &kp COLON  &kp UNDER    &kp KP_MULTIPLY &kp AMPS       &kp PIPE        &none &none     &none    &none     &none    &none
                                   &kp ESC         &kp SPACE      &kp TAB         &none &none     &none
                        >;
                };
                NUM {
// -----------------------------------------------------------------------------------------
// |     |  -  |  =  |  [  |  ]  |  +  | |     | |      |      |      |     |      |      |
// |     |  1  |  2  |  3  |  4  |  5  | |     | |  \   | SHFT | META | CTR | ALT  |      |
// |     |  6  |  7  |  8  |  9  |  0  | |     | |      |      |      |     |      |      |
//                   | ESC | SPC | TAB | |     | |      |      |      |
                        bindings = <
   &none  &kp MINUS &kp EQUAL    &kp LBKT        &kp RBKT       &kp PLUS      &none    &none     &none    &none     &none    &none
   &none  &kp N1    &kp N2       &kp N3          &kp N4         &kp N5        &kp BSLH &kp LSHFT &kp LGUI &kp LCTRL &kp LALT &none
   &none  &kp N6    &kp N7       &kp N8          &kp N9         &kp N0        &none    &none     &none    &none     &none    &none
                                 &kp ESC         &kp SPACE      &kp TAB       &none    &none     &none
                        >;
                };
                FUN {
// -----------------------------------------------------------------------------------------
// |     | F11 | F12 |  {  |  }  |  ~  | |     | |      |      |      |     |      |      |
// |     | F1  | F2  | F3  | F4  | F5  | |     | |      | SHFT | META | CTR | ALT  |      |
// |     | F6  | F7  | F8  | F9  | F10 | |     | |      |      |      |     |      |      |
//                   | ESC | SPC | TAB | |     | |      |      |      |
                        bindings = <
   &none   &kp F11   &kp F12      &kp LBRC        &kp RBRC       &kp TILDE     &none &none     &none    &none     &none    &none
   &none   &kp F1    &kp F2       &kp F3          &kp F4         &kp F5        &none &kp LSHFT &kp LGUI &kp LCTRL &kp LALT &none
   &none   &kp F6    &kp F7       &kp F8          &kp F9         &kp F10       &none &none     &none    &none     &none    &none
                                  &kp ESC         &kp SPACE      &kp TAB       &none &none     &none
                        >;
                };
                MUS {
// -----------------------------------------------------------------------------------------
// |     |     |     |      |      |     | |     | |      |      |      |     |      |      |
// |     | ALT | CTR | META | SHFT |     | |     | | ML   | MD   | MU   | MR  |      |      |
// |     |     |     |      |      |     | |     | | DL   | DD   | DU   | DR  |      |      |
//                   |      |      |     | |     | | BKSP | RET  | DEL  |
                        bindings = <
   &none    &none    &none     &none    &none     &none         &none           &none        &none       &none       &none    &none
   &none    &kp LALT &kp LCTRL &kp LGUI &kp LSHFT &none         &kp LEFT        &kp DOWN     &kp UP      &kp RIGHT   &none    &none
   &none    &none   &none     &none    &none     &none         &none           &none        &none       &none       &none    &none
                               &none    &none     &none         &kp BKSP        &kp RET      &kp DEL
                        >;
                };
                NAV {
// -----------------------------------------------------------------------------------------
// |     |     |     |      |      |     | |     | | HOME | PGDN | PGUP | END |      |      |
// |     | ALT | CTR | META | SHFT |     | |     | | LEFT | DOWN | UP   | RHT |      |      |
// |     |     |     |      |      |     | |     | |      |      |      |     |      |      |
//                   |      |      |     | |     | | BKSP | RET  | DEL  |
                              bindings = <
   &none &none    &none     &none    &none     &none         &kp HOME        &kp PG_DN    &kp PG_UP   &kp END     &none     &none
   &none &kp LALT &kp LCTRL &kp LGUI &kp LSHFT &none         &kp LEFT        &kp DOWN     &kp UP      &kp RIGHT   &none     &none
   &none &none    &none     &none    &none     &none         &none           &none        &none       &none       &none     &none
                            &none    &none     &none         &kp BKSP        &kp RET      &kp DEL
                        >;
                };
                MED {
// -----------------------------------------------------------------------------------------
// |     |     | BT1 | BT2  | BT3  |     | |     | |      | VOLD | MUTE | VOLU |      |      |
// |     | ALT | CTR | META | SHFT |     | |     | |      | PREV | PP   | NEXT |      |      |
// |     |     |     |      |      |     | |     | |      |      |      |      |      |      |
//                   |      |      |     | |     | | BKSP | RET  | DEL  |
                        bindings = <
   &none   &none        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 3 &none         &none           &kp C_VOL_DN &kp C_MUTE  &kp C_VOL_UP &none     &none
   &none   &kp LALT     &kp LCTRL    &kp LGUI     &kp LSHFT    &none         &none           &kp C_PREV   &kp C_PP    &kp C_NEXT   &none     &none
   &none   &none        &none        &none        &none        &none         &none           &none        &none       &none        &none     &none
                                     &none        &none        &none         &kp BKSP        &kp RET      &kp DEL
                        >;
                };
        };
        behaviors {
                hto: hold_to {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOLD TO";
                        #binding-cells = <2>;
                        tapping_term_ms = <350>;
                        flavor = "tap-preferred";
                        bindings = <&to>, <&kp>;
                };
        };
};
